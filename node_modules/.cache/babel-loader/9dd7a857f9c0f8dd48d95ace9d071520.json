{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport GameCodeGenerator from '../../tools/generator/GameCodeGenerator';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBldhn6e08q69OTNq246uskucmmKfUZjvs\",\n  authDomain: \"hanabi-64915.firebaseapp.com\",\n  projectId: \"hanabi-64915\",\n  storageBucket: \"hanabi-64915.appspot.com\",\n  messagingSenderId: \"653806150744\",\n  appId: \"1:653806150744:web:eedc14e49aae6d1852962d\",\n  measurementId: \"G-C72H5J6WQ9\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\nexport const auth = firebase.auth(); // const [user] = useAuthState(auth);\n\nexport const authSignIn = async () => {\n  const provider = new firebase.auth.GoogleAuthProvider();\n  auth.signInWithPopup(provider);\n};\nexport const createLobby = async host => {\n  // db.collection('lobby').add\n  let gameCodeExists = false;\n  let result;\n  let gameCode = null;\n\n  while (!gameCodeExists) {\n    try {\n      gameCode = GameCodeGenerator();\n      result = await verifyGameCode(gameCode);\n\n      if (!result) {\n        try {\n          db.collection('lobby').doc(gameCode).set({\n            host: auth.currentUser.uid,\n            playerCount: 1,\n            inSession: false,\n            playerList: [{\n              name: auth.currentUser.displayName,\n              id: auth.currentUser.uid\n            }],\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\n          });\n          gameCodeExists = true;\n        } catch (err) {}\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  if (gameCode != null && gameCodeExists) {\n    return {\n      code: gameCode,\n      status: 200\n    };\n  } else if (gameCode === null) {\n    return {\n      code: null,\n      status: 500\n    };\n  } else {\n    return {\n      code: null,\n      status: 500\n    };\n  }\n};\nexport const joinLobby = async gameCode => {\n  // db.collection('lobby').add\n  let gameCodeExists = false;\n  let result = await verifyGameCode(gameCode);\n\n  if (result) {\n    try {\n      // db.collection('lobby').doc(gameCode).set({\n      //     host: host,\n      //     player2: null,\n      //     player3: null,\n      //     player4: null\n      // })    \n      gameCodeExists = true;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  if (gameCode != null && gameCodeExists) {\n    return {\n      code: gameCode,\n      status: 200\n    };\n  } else if (gameCode === null) {\n    return {\n      code: null,\n      status: 500\n    };\n  } else {\n    return {\n      code: null,\n      status: 500\n    };\n  }\n};\n\nconst verifyGameCode = async code => {\n  return await db.collection('lobby').doc(code).get().then(querySnapshot => {\n    return querySnapshot.exists;\n  });\n};\n\nexport const getPlayerCount = async code => {\n  console.log(await db.collection('lobby').doc(code).get().then(querySnapshot => {\n    return querySnapshot;\n  })); // return await db.collection('lobby').doc(code).get().then(querySnapshot => {return querySnapshot.playerCount;});\n};","map":{"version":3,"sources":["/Users/omarp/workspace/React/Hanabi/src/services/firebase/firestore.js"],"names":["firebase","useAuthState","useCollectionData","GameCodeGenerator","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","db","firestore","auth","authSignIn","provider","GoogleAuthProvider","signInWithPopup","createLobby","host","gameCodeExists","result","gameCode","verifyGameCode","collection","doc","set","currentUser","uid","playerCount","inSession","playerList","name","displayName","id","timestamp","FieldValue","serverTimestamp","err","console","log","code","status","joinLobby","get","then","querySnapshot","exists","getPlayerCount"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nimport GameCodeGenerator from '../../tools/generator/GameCodeGenerator';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBldhn6e08q69OTNq246uskucmmKfUZjvs\",\n    authDomain: \"hanabi-64915.firebaseapp.com\",\n    projectId: \"hanabi-64915\",\n    storageBucket: \"hanabi-64915.appspot.com\",\n    messagingSenderId: \"653806150744\",\n    appId: \"1:653806150744:web:eedc14e49aae6d1852962d\",\n    measurementId: \"G-C72H5J6WQ9\"\n};\n\nfirebase.initializeApp(firebaseConfig)\n\nconst db = firebase.firestore();\nexport const auth = firebase.auth();\n// const [user] = useAuthState(auth);\n\nexport const authSignIn = async () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n}\n\nexport const createLobby = async (host) => {\n    // db.collection('lobby').add\n    let gameCodeExists = false;\n    let result;\n    let gameCode = null;\n    while (!gameCodeExists){\n        try {\n            gameCode = GameCodeGenerator();\n            result = await verifyGameCode(gameCode);\n            if (!result){\n                try{\n                    db.collection('lobby').doc(gameCode).set({\n                        host: auth.currentUser.uid,\n                        playerCount: 1,\n                        inSession: false,\n                        playerList: [{name: auth.currentUser.displayName, id: auth.currentUser.uid}],\n                        timestamp: firebase.firestore.FieldValue.serverTimestamp()\n                    })    \n                    gameCodeExists = true;\n                } catch (err){\n\n                }\n            } \n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    if (gameCode != null && gameCodeExists){\n        return {code: gameCode, status: 200};\n    } else if (gameCode === null){\n        return {code: null, status: 500};\n    } else {\n        return {code: null, status: 500};\n    }\n\n}\n\nexport const joinLobby = async (gameCode) => {\n    // db.collection('lobby').add\n    let gameCodeExists = false;\n    let result = await verifyGameCode(gameCode);\n    if (result){\n        try{\n            // db.collection('lobby').doc(gameCode).set({\n            //     host: host,\n            //     player2: null,\n            //     player3: null,\n            //     player4: null\n            // })    \n            gameCodeExists = true;\n        } catch (err){\n            console.log(err);\n        }\n    } \n    \n    if (gameCode != null && gameCodeExists){\n        return {code: gameCode, status: 200};\n    } else if (gameCode === null){\n        return {code: null, status: 500};\n    } else {\n        return {code: null, status: 500};\n    }\n\n}\n\nconst verifyGameCode = async(code) => {\n    return await db.collection('lobby').doc(code).get().then(querySnapshot => {return querySnapshot.exists;});\n}\nexport const getPlayerCount = async(code) => {\n    console.log(await db.collection('lobby').doc(code).get().then(querySnapshot => {return querySnapshot;}))\n    // return await db.collection('lobby').doc(code).get().then(querySnapshot => {return querySnapshot.playerCount;});\n}"]},"metadata":{},"sourceType":"module"}